name: Node.js CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  ACCOUNT_SERVICE_API_KEY: ${{ secrets.ACCOUNT_SERVICE_API_KEY }}
  ACCOUNT_SERVICE_FACEBOOK_CLIENT_SECRET: ${{ secrets.ACCOUNT_SERVICE_FACEBOOK_CLIENT_SECRET }}
  ACCOUNT_SERVICE_GOOGLE_CLIENT_SECRET: ${{ secrets.ACCOUNT_SERVICE_GOOGLE_CLIENT_SECRET }}
  ACCOUNT_SERVICE_JWT_SECRET: ${{ secrets.ACCOUNT_SERVICE_JWT_SECRET }}
  MESSAGE_SERVICE_ACCOUNT_SERVICE_API_KEY: ${{ secrets.MESSAGE_SERVICE_ACCOUNT_SERVICE_API_KEY }}
  MESSAGE_SERVICE_JWT_SECRET: ${{ secrets.MESSAGE_SERVICE_JWT_SECRET }}
  ACCOUNT_SERVICE_FACEBOOK_CLIENT_ID: ${{ vars.ACCOUNT_SERVICE_FACEBOOK_CLIENT_ID }}
  ACCOUNT_SERVICE_FILE_STORAGE_SERVICE_MAX_FILE_SIZE: ${{ vars.ACCOUNT_SERVICE_FILE_STORAGE_SERVICE_MAX_FILE_SIZE }}
  ACCOUNT_SERVICE_FILE_STORAGE_SERVICE_URL: ${{ vars.ACCOUNT_SERVICE_FILE_STORAGE_SERVICE_URL }}
  ACCOUNT_SERVICE_FRONT_END_URL: ${{ vars.ACCOUNT_SERVICE_FRONT_END_URL }}
  ACCOUNT_SERVICE_GOOGLE_CLIENT_ID: ${{ vars.ACCOUNT_SERVICE_GOOGLE_CLIENT_ID }}
  ACCOUNT_SERVICE_JWT_AUDIENCE: ${{ vars.ACCOUNT_SERVICE_JWT_AUDIENCE }}
  ACCOUNT_SERVICE_JWT_EXPIRATION_TIME_IN_SECONDS: ${{ vars.ACCOUNT_SERVICE_JWT_EXPIRATION_TIME_IN_SECONDS }}
  ACCOUNT_SERVICE_JWT_ISSUER: ${{ vars.ACCOUNT_SERVICE_JWT_ISSUER }}
  ACCOUNT_SERVICE_LOG_LEVEL: ${{ vars.ACCOUNT_SERVICE_LOG_LEVEL }}
  ACCOUNT_SERVICE_MONGO_URI: ${{ vars.ACCOUNT_SERVICE_MONGO_URI }}
  ACCOUNT_SERVICE_PORT: ${{ vars.ACCOUNT_SERVICE_PORT }}
  ACCOUNT_SERVICE_RABBIT_MQ_EXCHANGE_NAME: ${{ vars.ACCOUNT_SERVICE_RABBIT_MQ_EXCHANGE_NAME }}
  ACCOUNT_SERVICE_RABBIT_MQ_URL: ${{ vars.ACCOUNT_SERVICE_RABBIT_MQ_URL }}
  ACCOUNT_SERVICE_REDIS_URL: ${{ vars.ACCOUNT_SERVICE_REDIS_URL }}
  MESSAGE_SERVICE_ACCOUNT_SERVICE_URL: ${{ vars.MESSAGE_SERVICE_ACCOUNT_SERVICE_URL }}
  MESSAGE_SERVICE_JWT_AUDIENCE: ${{ vars.MESSAGE_SERVICE_JWT_AUDIENCE }}
  MESSAGE_SERVICE_JWT_EXPIRATION_TIME_IN_SECONDS: ${{ vars.MESSAGE_SERVICE_JWT_EXPIRATION_TIME_IN_SECONDS }}
  MESSAGE_SERVICE_JWT_ISSUER: ${{ vars.MESSAGE_SERVICE_JWT_ISSUER }}
  MESSAGE_SERVICE_LOG_LEVEL: ${{ vars.MESSAGE_SERVICE_LOG_LEVEL }}
  MESSAGE_SERVICE_MONGO_URI: ${{ vars.MESSAGE_SERVICE_MONGO_URI }}
  MESSAGE_SERVICE_PORT: ${{ vars.MESSAGE_SERVICE_PORT }}
  MESSAGE_SERVICE_WEB_SOCKET_SERVER_PORT: ${{ vars.MESSAGE_SERVICE_WEB_SOCKET_SERVER_PORT }}
  VITE_ACCOUNT_SERVICE_BASE_URL: ${{ vars.VITE_ACCOUNT_SERVICE_BASE_URL }}
  VITE_AUTH_SERVICE_BASE_URL: ${{ vars.VITE_AUTH_SERVICE_BASE_URL }}
  VITE_MESSAGE_SERVICE_BASE_URL: ${{ vars.VITE_MESSAGE_SERVICE_BASE_URL }}
  VITE_REALTIME_MESSAGE_SERVICE_BASE_URL: ${{ vars.VITE_REALTIME_MESSAGE_SERVICE_BASE_URL }}

jobs:
  build:
    runs-on: ubuntu-22.04
    environment: development
    strategy:
      matrix:
        node-version: [23.1.0]
    steps:
      - uses: actions/checkout@v4

      - name: Install docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run containers
        run: |
          docker compose --profile ci up -d
        continue-on-error: false

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run type check
        run: pnpm type-check

      - name: Run lint
        run: pnpm lint

      - name: Run format
        run: pnpm format

      - name: Wait for containers to be healthy
        run: |
          #!/bin/bash

          # Maximum number of attempts
          max_attempts=10
          attempt=1

          # Function to check the health of containers
          check_health() {
              # Get the container IDs
              containers=$(docker-compose ps --orphans=false -q)

              # Check if containers exist
              if [ -z "$containers" ]; then
                  echo "No containers found, retrying..."
                  return 1
              fi

              # Loop over each container and check its health status
              for container in $containers; do
                  # Check if the container has a health check configured
                  health_status=$(docker inspect --format '{{.State.Health.Status}}' "$container" 2>/dev/null)

                  # If the container does not have a health check configured, assume it is healthy
                  if [ -z "$health_status" ]; then
                      echo "Container $container does not have a health check configured, assuming it is healthy."
                      continue
                  fi

                  # If any container is not healthy or starting, return failure
                  if [ "$health_status" != "healthy" ]; then
                      echo "Container $container is $health_status, retrying..."
                      return 1
                  fi
              done

              # If all containers are healthy
              return 0
          }

          # Until loop with retry mechanism
          until check_health; do
              if [ "$attempt" -ge "$max_attempts" ]; then
                  echo "Max attempts reached, exiting..."
                  exit 1
              fi

              echo "Containers are not healthy, retrying... (Attempt $attempt)"
              sleep 5  # Wait for 5 seconds before retrying
              attempt=$((attempt + 1))
          done

          echo "All containers are healthy!"

      - name: Run tests
        run: pnpm test
